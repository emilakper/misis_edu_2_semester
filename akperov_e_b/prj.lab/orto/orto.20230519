#include <iostream>


namespace geo2d {
    namespace orto {
        class Quad {
        public:
            Quad() = default;
            Quad(const Quad&) = default;
            ~Quad() = default;
            Quad(const double& x, const double& y, const double& height, const double& width) {
                x_center_ = x;
                y_center_ = y;
                height_ = height;
                width_ = width;
            };

            double GetW() { return width_; };
            double GetH() { return height_; };
            virtual void SetW(const double& width) { width_ = width; };
            virtual void SetH(const double& height) { height_ = height; };
        public:
            double x_center_{ 0.0 };
            double y_center_{ 0.0 };
        protected:
            double height_{ 0.0 };
            double width_{ 0.0 };
        };

        class Rect:public Quad {
        public:
            Rect() = default;
            Rect(const Rect&) = default;
            ~Rect() = default;
            Rect(const double& x, const double& y, const double& height, const double& width) {
                x_center_ = x;
                y_center_ = y;
                height_ = height;
                width_ = width;
            };

        };

        class Square :public Quad {
        public:
            Square() = default;
            Square(const Square&) = default;
            ~Square() = default;
            Square(const double& x, const double& y, const double& a) {
                x_center_ = x;
                y_center_ = y;
                height_ = a;
                width_ = a;
            };

            double GetW() { return width_; };
            double GetH() { return height_; };
            void SetW(const double& width) override { width_ = width; height_ = width; };
            void SetH(const double& height) override { width_ = height; height_ = height; };
        };
    }
}




int main() {
    std::cout << "Default constructor and getters" << std::endl;
    geo2d::orto::Quad quad;
    std::cout <<"Height=" << quad.GetH() << std::endl;
    std::cout << "Width=" << quad.GetW() << std::endl;
    std::cout << "Setters" << std::endl;
    quad.SetH(5.0);
    quad.SetW(6.0);
    std::cout << "Height=" << quad.GetH() << std::endl;
    std::cout << "Width=" << quad.GetW() << std::endl;

    std::cout << std::endl;
    std::cout << "Same for Rectangle" << std::endl;
    geo2d::orto::Rect rect;
    std::cout << "Height=" << rect.GetH() << std::endl;
    std::cout << "Width=" << rect.GetW() << std::endl;
    std::cout << "Setters" << std::endl;
    rect.SetH(5.0);
    rect.SetW(6.0);
    std::cout << "Height=" << rect.GetH() << std::endl;
    std::cout << "Width=" << rect.GetW() << std::endl;

    std::cout << std::endl;
    std::cout << "Same for Square" << std::endl;
    geo2d::orto::Square sqr;
    std::cout << "Height=" << sqr.GetH() << std::endl;
    std::cout << "Width=" << sqr.GetW() << std::endl;
    std::cout << "Setters" << std::endl;
    sqr.SetH(5.0);
    std::cout << "Height=" << sqr.GetH() << std::endl;
    std::cout << "Width=" << sqr.GetW() << std::endl;
    sqr.SetH(6.0);
    std::cout << "Height=" << sqr.GetH() << std::endl;
    std::cout << "Width=" << sqr.GetW() << std::endl;

    std::cout << "Base constructors for all classes" << std::endl;
    geo2d::orto::Quad q(3.0, 3.0, 5.0, 6.0);
    std::cout << "Quad:" << q.x_center_ <<" "<< q.y_center_ << " " << q.GetH() << " " << q.GetW() << std::endl;
    geo2d::orto::Rect r(3.0, 3.0, 5.0, 6.0);
    std::cout << "Rect:" << r.x_center_ << " " << r.y_center_ << " " << r.GetH() << " " << r.GetW() << std::endl;
    geo2d::orto::Square s(3.0, 3.0, 5.0);
    std::cout << "Square:" << s.x_center_ << " " << s.y_center_ << " " << s.GetH() << " " << s.GetW() << std::endl;
    
    //Copy 
    geo2d::orto::Rect r1(r);
    std::cout << "Rect:" << r1.x_center_ << " " << r1.y_center_ << " " << r1.GetH() << " " << r1.GetW() << std::endl;

}